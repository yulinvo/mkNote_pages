(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{388:function(a,n,t){"use strict";t.r(n);var e=t(13),r=Object(e.a)({},(function(){var a=this,n=a._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"python内置函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#python内置函数"}},[a._v("#")]),a._v(" python内置函数")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("abs():取绝对值\n\nall():传递参数中每一个都是真，结果才为True ;\n\t0、none、空字符串、空列表、空元组、空字典为假，all([11,22,33,''])为假，去除‘’后为真(‘ ’只有一个空格也是真的)；\n\tall([])真，all([''])假，判断里面的元素？  可以使用bool查看真假：bool(None)、bool(‘’)\nany():只要有一个为真的，返回真      \n\tany(['',None,[],{},1]):没有1则为假，红色部分似乎解释了all中all([])真(这里面的[]是固定用法)，all([''])假的问题\n\nassert :断言，也可以使用if判断    assert  type('aaa') is str ; print 123\n\nascii():\nbin():二进制     bin（10），结果中开始的'0b'就表示是二进制\noct():八进制     ‘0o’表示八进制\nhex():16进制     '0x'表示16进制\n\nbool():\ncallable():是否可执行,如果可执行会有__call__方法     f=lambda x:x+1 ;callable(f)为True ，函数有__call__方法：f.__call__(5)/     l=[]; callable(l)为False\nchr():将一个数字转换为ascii码，通常配合ord使用     chr(random.random(1,99))可以动态生成验证码\nord():将一个ascii转换为数字，通常配合chr使用     ord('a')\ncompile():将代码编译为可执行的文件     如：str='''def index():return 'Hello World!' '''    ；compile(str,'<string>','exec')\ndelattr():反射的时候用\ndivmod():地板除     divmod(3,5)\nenumerate():额外增加一行编号 如：a=['a','b','c']  for i,item in enumerate(a,5): print i,item,之前都是for i in enumerate(a):print i     其中5是开始的编号，不是步进\neval()：对字符串(好像只有数字)进行运算     如：eval(\"3*5\")\nexec(执行代码)：    如exec( for循环或lambda表达式)，但是exec没有返回值\nfilter():过滤 filter的第一个参数是函数，func，没有()   如：print filter(lambda x:x>20,li)，结果[22, 33]\nmap():映射，map的第一个参数是函数，func，没有()    如：li=[11,22,33];print map(lambda x:x*2,li) ,结果[22, 44, 66]\nfloat():\nformat():\n     def normal_method(*args,**kwargs):\n                print \"calling normal_method({0},{1})\".format(args,kwargs)\n        o.normal_method(1,2,x=3,y=4)\nfrozenset():不能增加修改的set\ngetattr(): ?\nglobals():显示当前所有全局变量(只能显示，不能修改么？)\nlocals():局部变量\nhash():     当字典的key或value很长的时候，用hash表示，场景？\nmax():获取最大值     max(11,22,33,44)\nmin():获取最小值\npow():幂\nrange():区间   如:print range(1,100,5)     默认输出的类型好像是list，5是步长\nreversed():反转\nround():四舍五入     如：round(4.6)\nslice():切片，类似与a[1:3]\nsorted():排序\nsum():求和\nsuper():通过子类执行父类的构造方法\nvars():  dir()返回的是key;vars()返回的是key和value，是个字典     #dir()里面是空的也可以返回数据\nzip():相应的元素作为一组，如：x=[1,2,3];y=[4,5,6];print zip(x,y);print zip(*zip(x,y))     此时如果有个z=[7,8,9],则zip后每组里有3个元素，如果z=[],则每组为0个元素\n")])])]),n("p",[n("strong",[a._v("def函数")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("def say():      print 'hi'\n#say()                  #执行这个的时候实际是执行了__call__的方法\n\n\n#say.__call__()         #\n")])])]),n("h2",{attrs:{id:"return返回值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#return返回值"}},[a._v("#")]),a._v(" return返回值")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("只要碰到return，就退出整个函数，即使是存在while死循环")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("def cash_out():\n    while True:          #即使有while死循环，也是只执行一次\n        return 1\n")])])])])]),a._v(" "),n("h2",{attrs:{id:"函数传参"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数传参"}},[a._v("#")]),a._v(" 函数传参")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("指定参数名称")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("def main(a1,a2):\n\tprint a1,a2\n\nmain(a2=1,a1=2)\t\t\t\t#可以颠倒参数位置\n")])])])]),a._v(" "),n("li",[n("p",[a._v("默认参数（默认参数必须要放在最后面，否则会报语法错误）")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("def main(a1,a2,a3='abc'):\t#c如果不传递使用'abc'，传递则以传递的参数为准；如果此处b有默认值则c必须要有默认值；\n\tprint a1,a2,a3\n\nmain(1,2)\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("def main(a=10,b=20,c=30):\n    print(a,b,c)\n    \nmain(1,2)\t\t\t\t\t\t#1,2,30\nmain(a=2,b=1)\t\t\t\t\t#2,1,30\n")])])])])]),a._v(" "),n("p",[a._v("​")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("动态参数（*放到前面，**放到后面，顺序颠倒会报错，语法规定这样）")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("def main(*args,**kwargs):\n    print args,kwargs  \t  #args为tuple类型:(11, 22, 33)   kwargs为dict类型：{'uu': 22, 'n1': 11, 'xx': 33} \n    \n    for i in args:\n        print i\n\nmain(11,22,33,n1=11,uu=22,xx=33)\n")])])]),n("ul",[n("li",[n("p",[a._v("当传递预先定义的list、dict时")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("def main(*args,**kwargs):\n\tpass\n\na1=[11,22,33]\na2={'n1':11,'uu':22,'xx':33}\n\nmain(a1,a2)\t\t#会将a1和a2作为一个tuple都传递给args了，kwargs里面是空的；正确的方法是：main(*a1,**a2)\n")])])])])])])]),a._v(" "),n("h2",{attrs:{id:"lambda匿名函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lambda匿名函数"}},[a._v("#")]),a._v(" lambda匿名函数")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("#lambda函数将代码执行的结果自动加了一个return值，将执行的结果return\n\nfunc = lambda x:x*10\nfunc(2)\t\t\t\t\t\t#结果为20\n")])])]),n("h2",{attrs:{id:"递归函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递归函数"}},[a._v("#")]),a._v(" 递归函数")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("一：\n    def func(a):\n        print a\n        if a/2 >1:\n            res=func(a/2)\n            print res      #满足(a/2>1)条件时不会执行这句；执行多少层，最后就退出多少层，func到res=func(a/2)之间没有\n                             return，所以返回None\n            return res      #满足(a/2>1)条件时不会执行这句；直到最后跳出循环才执行\n    func(100)\n\n\n\n二：\n    def func(a):\n        print a\n        if a/2 >1:\n            return func(a/2)        #这种加上一个return是自结束，就不会有那么多层的None\n    func(100)\n\n\n\n三:\n    def calc(a):\n        print a\n        if a/2 > 1:\n            res = calc(a/2)\n            print ('res',res)\n        print \"A\",a\n        return  a          #return是返回给上级函数，返回给了res = calc(a/2) 这里\n    calc(10)\n\n\n    13-14集没有仔细看\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);