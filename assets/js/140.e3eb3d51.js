(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{408:function(a,t,e){"use strict";e.r(t);var s=e(13),r=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[t("strong",[a._v("set集合")])]),a._v(" "),t("blockquote",[t("p",[a._v("一个无序且不重复的元素集合（爬虫的时候会用到）")])]),a._v(" "),t("h2",{attrs:{id:"创建set集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建set集合"}},[a._v("#")]),a._v(" 创建set集合")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a = {1,2,3}\n\nset()\nset(['a','b','c'])\t\t\t#添加的元素必须时一个可迭代的对象，set(1,2,3)是不可以的\nset((1,2,3))\n")])])]),t("h2",{attrs:{id:"去重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#去重"}},[a._v("#")]),a._v(" 去重")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("# 元素不能重复（能直接对字符串或list去重）\n\nt1=[1,2,1] && set(t1) \t\t\t\t\t\t\t\t#结果 {1,2}\n\na='aabbcc' && set(a)\t\t\t\t\t\t\t\t#结果 {'a', 'b', 'c'}\n")])])]),t("h2",{attrs:{id:"add"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[a._v("#")]),a._v(" add")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#添加            \n\na=set() &&  a.add('xx') \n")])])]),t("h2",{attrs:{id:"pop、remove"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pop、remove"}},[a._v("#")]),a._v(" pop、remove")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("pop：移除元素（好像是随机pop一个元素 ），同时获取被pop的元素\n\t#a.pop()\n\t\nremove：移除【指定】元素，和pop相比只是移除，没有获取          \n\t#a.remove('a')\n")])])]),t("h2",{attrs:{id:"clear"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clear"}},[a._v("#")]),a._v(" clear")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#清空          \n\na.clear()\n")])])]),t("h2",{attrs:{id:"copy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[a._v("#")]),a._v(" copy")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("浅拷贝\n")])])]),t("h2",{attrs:{id:"difference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#difference"}},[a._v("#")]),a._v(" difference")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#取出不同，不会更改原始set表\n\na = set(['a','b','c']) && a.difference(['a']) \t\t#结果为set(['c', 'b'])，初始的a不变\n")])])]),t("ul",[t("li",[t("p",[a._v("和symmetric_difference的区别")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#difference 只是将自身元素中的不同作为结果返回，symmetric_difference是将两个集合不同内容合并后作为结果返回\n\na=set(['a','b','c'])\na.difference(['b','d'])\t\t\t\t\t\t#结果为{'a', 'c'}\na.symmetric_difference(['b','d'])\t\t\t#结果为{'a', 'c', 'd'}\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"difference-update"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#difference-update"}},[a._v("#")]),a._v(" difference_update")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#取出不同然后直接修改原set表\n\na = set(['a','b','c'])\na.difference_update('a')\t\t\t#此时a的值为{'b', 'c'}\n\n")])])]),t("h2",{attrs:{id:"discard"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#discard"}},[a._v("#")]),a._v(" discard")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#移除元素     \n\na.discard('a')\n")])])]),t("h2",{attrs:{id:"intersection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#intersection"}},[a._v("#")]),a._v(" intersection")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#取交集\n\n#a=set(['a','b','c']) && a.intersection('b')\t\t#结果为{'b'}，此处a.intersection(['b'])也可以\n")])])]),t("h2",{attrs:{id:"intersection-update"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#intersection-update"}},[a._v("#")]),a._v(" intersection_update")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("取交集并修改原set  \n\na=set(['a','b','c']) && a.intersection_update('b')\t\t\t#a的值变了\n")])])]),t("h2",{attrs:{id:"symmetric-difference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#symmetric-difference"}},[a._v("#")]),a._v(" symmetric_difference")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#获取差集，不改变原列表          \n\nb=a.symmetric_difference(['a','b'])\n")])])]),t("ul",[t("li",[t("p",[a._v("和difference的区别")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#difference 只是将自身元素中的不同作为结果返回，symmetric_difference是将两个集合不同内容合并后作为结果返回\n\na=set(['a','b','c'])\na.difference(['b','d'])\t\t\t\t\t\t#结果为{'a', 'c'}\na.symmetric_difference(['b','d'])\t\t\t#结果为{'a', 'c', 'd'}\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"symmetric-difference-update"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#symmetric-difference-update"}},[a._v("#")]),a._v(" symmetric_difference_update")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#获取差集并更新原列表     \n\na.symmetric_difference_update(['a','b'])\n")])])]),t("h2",{attrs:{id:"union"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#union"}},[a._v("#")]),a._v(" union")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#并集，不修改原列表               \n\nb=a.union(['c','e']), print b\n")])])]),t("h2",{attrs:{id:"update"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[a._v("#")]),a._v(" update")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#好像是取并集然后更新原列表          \n\na.update(['c','e','f'])\n")])])]),t("h2",{attrs:{id:"布尔判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔判断"}},[a._v("#")]),a._v(" 布尔判断")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#返回布尔值\n\nisdisjoint：如果没有交集范围true     \t\t\t\t  print a.isdisjoint('b')\nissubset ：是否是子集，是则为true                \t \t  print a.issubset(['a','b','c','d'])\nissuperset ：是否是 超集                              print a.issuperset(['a','b'])\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);