(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{416:function(s,n,t){"use strict";t.r(n);var e=t(13),r=Object(e.a)({},(function(){var s=this._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("import  subprocess\nsubprocess.run('ipconfig')      #2.x没有run方法，替换os.system()\nsubprocess.call('ipconfig')     #2.x的方法\nsubprocess.call([\"df\",\"-h\"])    #2.x的方法，有多个参数的时候\nsubprocess.call(\"df -h\",shell=True)         #2.x的方法，用原生的shell执行命令\n\na=subprocess.call('df -h',shell=True)   #print a只是一个状态返回码，不是结果\na=subprocess.call('df -h',shell=True,stdout=subprocess.PIPE)        #'df -h'实际是在当前进程的子进程执行的，加上管道\n两个进程之间默认是不能通信的，需要借助管道（stdout=subprocess.PIPE，子进程输出传递给上一级进程（会有stderr），同理还有stdin当前的输入传递给子进程）\n\na=subprocess.Popen('df -h',shell=True,stdout=subprocess.PIPE)        #a获取的才是结果,df -h'实际是在当前进程的子进程执行的\nprint a.stdout.read()\n\nsubprocess.check_call(\"sdf\",shell=True)             #如果命令没有正常执行(状态码不是0)，会报错抛异常\nsubprocess.check_output()                           #如果状态码是0，返回执行结果，否则抛异常\n\ncwd：设置子进程的当前目录\n\n示例：与子进程交互\nimport  subprocess\nobj=subprocess.Popen([\"python\"],stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE)\nobj.stdin.write('print 1 \\n')       #进入交互器之后输入的第一句话，记得换行，不然命令连到一起无法执行会报错\nobj.stdin.write('print 2 \\n')       #进入交互器之后输入的第二句话\nobj.stdin.write('print 3 \\n')       #进入交互器之后输入的第三句话\nobj.stdin.write('print 4 \\n')       #进入交互器之后输入的第四句话\n\nout_error_list = obj.communicate(timeout=10)            #退出交互器，获取结果，获取到的就是上面4行命令的输出\nprint out_error_list\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);