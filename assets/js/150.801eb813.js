(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{415:function(n,e,g){"use strict";g.r(e);var t=g(13),l=Object(t.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("p",[n("strong",[this._v("logging模块(日志模块)")])]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("LOG_PATH=os.path.abspath(os.path.join(__file__,'..'))           #在当前文件中拼接路径，在ipython中执行__file__会找不到文件>路径\nlogging.basicConfig(\n\tlevel=logging.INFO,\n\tformat='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',\n\t\t\t#时间戳、文件名、%(lineno)d方式对字符串进行格式化、日志级别、日志内容\n\t\t\t#%(lineno)d  比如打印info信息的代码在test的第11行，此处就会显示 test.py[line:11] INFO xxx\n\tdatefmt='%Y-%m-%d %H:%M:$S',\n\tfilename=os.path.join(LOG_PATH,'student.log'),                  #日志文件名\n\tfilemode='a')\n\n代码中定义日志级别：\n\timport loggine\n\tlogger=loggine.getLogger(__name__)                  #如果是main函数就是main，如果不是main函数就是模块的名称\n\t\t#对应了上面format的filename，比如当前文件是test.py，filename对应位置就是test.py\n\t\t#也可以写logger=loggine.getLogger('test')\n\tlogger.info('命令[%s]不存在' %command)\n\n还有一种常用方式，将INFO的级别打到终端上，大于INFO级别的写到文件里，教程中提了一下但是没有仔细讲解\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("import logging\n\n#logging的日志可以分为debug、info(正常)、warning、error、critical(致命)\n\n一：直接输出到屏幕\nlogging.warning('nihao')\nlogging.critical('Server id Down')\n\n二：把日志写入到文件\nlogging.basicConfig(filename='example.log',level=logging.INFO,format='%(asctime)s %(message)s',datefmt='[%m/%d/%Y %I:%M:%S %p]')\n\nlogging.debug('this message shoule go to the log file')\nlogging.info('so should this')\nlogging.warning('and this,too')\nlogging.critical('and this,too')\n\n\n三：同时把日志打印在屏幕和日志文件里\n#生成logger对象\nlogger = logging.getLogger('TEST-LOG')\nlogger.setLevel(logging.DEBUG)                              #全局的loglevel\n\n#生成负责屏幕输出的 handle\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)                                   #局部的loglevel\n\n#生成文件输出的handle\nfh = logging.FileHandler('access.log')\nfh.setLevel(logging.WARNING)                                 #局部的loglevel\n\n#创建格式\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n#将格式赋给ch和fh\nch.setFormatter(formatter)\nfh.setFormatter(formatter)\n\n#将创建的2个handle赋给logger\nlogger.addHandler(ch)\nlogger.addHandler(fh)\n\n#\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warn('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n")])])])])}),[],!1,null,null,null);e.default=l.exports}}]);