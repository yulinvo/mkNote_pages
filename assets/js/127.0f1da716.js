(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{393:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("strong",[t._v("class")])]),t._v(" "),s("blockquote",[s("p",[t._v("面向对象三个要素：封装、继承(优先级高到低：从下到上、多层继承时从左到右)、多态(各个对象之间可以相互替代)")])]),t._v(" "),s("h2",{attrs:{id:"实例化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例化"}},[t._v("#")]),t._v(" 实例化")]),t._v(" "),s("p",[t._v("如果不需要参数，可以不写__init__函数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Dog:                #没有object，没有__init__函数\n    def eat(self):\n        print '[%s]............!'\nd = Dog()\nd.eat()\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Girl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cook_food")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cook_food---"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'---'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此处没有self，不需要传递self实例")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'say hi ...'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        \na1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Girl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建对象； （=只是接收下）!!!!!!!!!!")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建对象时默认调用的方法，Girl()时就执行了(无论是否=接收)！！！！！！！！！")]),t._v("\na1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cook_food"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nihao'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#最常用的方法调用")]),t._v("\nGirl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cook_food"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nihao'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#另一种形式上的方法调用，将实例化a1传递给self参数")]),t._v("\nGirl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cook_food"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nihao'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这种Girl()实例化调用会报错，直接class类调用！！！！！！！！")]),t._v("\n\nGirl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("say"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#此时不需要传递self，因为say函数在定义的时候没有设置参数self ！！！！")]),t._v("\n")])])]),s("h2",{attrs:{id:"class和instance参数的self"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class和instance参数的self"}},[t._v("#")]),t._v(" class和instance参数的self")]),t._v(" "),s("p",[t._v('参考【基础数据类型--\x3eint类型--\x3eadd中的"class类和instance参数的self"】')]),t._v(" "),s("h2",{attrs:{id:"类变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类变量"}},[t._v("#")]),t._v(" 类变量")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Car")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    color "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'red'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" logo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("     self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("logo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" logo\n\na1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Car"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'benz'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'white'")]),t._v("\na1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1111'")]),t._v("                          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#可以动态赋值")]),t._v("\n\nCar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'100'")]),t._v("\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#添加类变量，之后的实例化出来的实例也存在这个变量了 ！！！！！！")]),t._v("\n")])])]),s("h3",{attrs:{id:"私有变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#私有变量"}},[t._v("#")]),t._v(" "),s("strong",[t._v("私有变量")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'18'")]),t._v("\n    __name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'huyang'")]),t._v("  \nt1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# __开头的是私有变量，外部无法调用; ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过dir(T)/dir(t1)查看发现变量名称被改为了'_T__name'，使用T._T__name/t1._T__name依然可以调用\t！！！！！")]),t._v("\n")])])]),s("h2",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),s("blockquote",[s("p",[t._v("继承的优先级从高到低依次为：从下到上、多层继承时从左到右")]),t._v(" "),s("p",[t._v("参考文档：https://www.bilibili.com/video/BV1ex411x7Em?p=397&spm_id_from=pageDriver")])]),t._v(" "),s("h3",{attrs:{id:"多重继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多重继承"}},[t._v("#")]),t._v(" "),s("strong",[t._v("多重继承")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\nC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#输出‘A'")]),t._v("\n")])])]),s("h3",{attrs:{id:"super继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super继承"}},[t._v("#")]),t._v(" "),s("strong",[t._v("super继承")])]),t._v(" "),s("blockquote",[s("p",[t._v("参考文档：")]),t._v(" "),s("p",[t._v("#super在python中是一个特殊的类，super()是在使用类创建对象！！！！！！！")]),t._v(" "),s("p",[t._v("推荐使用super这种方法："),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1ex411x7Em?p=397&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.bilibili.com/video/BV1ex411x7Em?p=397&spm_id_from=pageDriver"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("​\t\t#super().父类方法，这个没有传递self")]),t._v(" "),s("p",[t._v("早期的2.x中的一种方法： https://www.bilibili.com/video/BV1ex411x7Em?p=398&spm_id_from=pageDriver")]),t._v(" "),s("p",[t._v("​\t\t#父类名称.方法(self)\t\t\t#这种在django教程的objects管理器重写时好像看到过")]),t._v(" "),s("p",[t._v('​\t\t#这种调用实际上就是Person.say(xiaoming,"你好")\t其中xiaoming是实例化的对象，这种在上面的笔记自己记录过')])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Person:\n    def __init__(self,name) -> None:\n        self.name = name\n\n\nclass AA(Person):\n    def __init__(self, name,age) -> None:\n    \tprint('super继承前打印...')\n        super().__init__(name)\t\t\t\t\t#继承，推荐使用这种方法\n        #Person.__init__(self,name)\t\t\t\t#python2.x版本的继承，不推荐\n        \t#而且一旦写成了子类名AA.__init__会出现死循环，参考视频课件中有讲到\n        self.age = age\n        print('super继承后打印...')\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class A(object):\n    def say(self):\n        print('A say hi ...')\n        pass\t\t\t#如果此处有return t,在class C下可以执行 result=super(C,self).say()，将返回的值取出！！！！\nclass B(object):\n    def say(self):\n        print('B say hi ...')\nclass C(A,B):\n    def say(self):\n        # super(C,self).say()\t\t\t#因为C继承了A，所以super(C,self)就是A，即C的上层方法就是A\n        \t#能super(B,self)么，好像不行，那写这个C的意义是什么呢？？？\n        super().say()\t\t\t\t#ipython中直接执行super?? 里面有super的各种用法，最后面是class中的用法\n        #如果是super写在下面就先输出'C say hi'和'A say hi'\t!!!!!!\n        print('C say hi ....')\n\n\nC().say()\t\t\t#输出'A say hi ...'和'C say hi ....'\n")])])]),s("h2",{attrs:{id:"类属性、类方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类属性、类方法"}},[t._v("#")]),t._v(" 类属性、类方法")]),t._v(" "),s("blockquote",[s("p",[t._v("不用实例化可以直接调用")])]),t._v(" "),s("h3",{attrs:{id:"类属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类属性"}},[t._v("#")]),t._v(" "),s("strong",[t._v("类属性")])]),t._v(" "),s("blockquote",[s("p",[t._v("类属性是记录跟类相关的特征的，不会记录具体对象的特征！！！！！！！")]),t._v(" "),s("p",[t._v("参考文档：https://www.bilibili.com/video/BV1ex411x7Em?p=409&spm_id_from=pageDriver")])]),t._v(" "),s("p",[s("strong",[t._v("类属性可以直接调用！！！！  类属性可以被instance继承，也可以被class继承")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("class类直接读取")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class A:\n    count = 0\n\nprint(A.count)\n")])])])]),t._v(" "),s("li",[s("p",[t._v("instance读取")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#查看类创建了多少个实例\n#coding:utf8\nclass A:\n    count = 0\n    name = None\n    def __init__(self) -> None:\n        # self.count += 1   \t\t#这样写是定义了实例变量count，值为1\n        A.count += 1\n\na1 = A()  && a2 = A()\nA.name = "jim"  && a1.name = "lilei"\n\nprint(A.count,a1.count)  \t#结果：2 2\nprint(A.name,t1.name)\t\t#结果：jim lilei\n')])])])]),t._v(" "),s("li",[s("p",[t._v("class继承后读取")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class A:\n    count = 100\n\nclass B(A):  pass\n\nprint(B.count)\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"类方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类方法"}},[t._v("#")]),t._v(" "),s("strong",[t._v("类方法")])]),t._v(" "),s("blockquote",[s("p",[t._v("类方法同类属性一样也是跟类本身相关，跟具体的对象无关，使用cls.xx访问类属性、访问其他类方法！！！！！！！！")]),t._v(" "),s("p",[t._v("参考文档：https://www.bilibili.com/video/BV1ex411x7Em?p=412&spm_id_from=pageDriver")])]),t._v(" "),s("p",[s("strong",[t._v("类方法只能访问类变量，不能访问实例变量（如self.name,self.age）")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class A:\n    count = 100\n    \n    @classmethod\n    def demo1(cls):\n        print('demo1----')\n        \n    @classmethod\n    def demo2(cls):\n        print('demo2----')\n        print(cls.count)\t\t\t\t\t#通过cls调用类属性\n        cls.demo1()\t\t\t\t\t\t\t#通过cls调用类方法\n        print(cls,cls())\t\t\t\t    #<class '__main__.A'> <__main__.A object at 0x000001CB9FA27F10>\n        \t#print(cls)和print(A)的结果是一样的\n            #cls()和a1=A()然后print(a1)结果是类似的，cls()应该就是实例化吧？\n        return cls()\t\t\t\t\t\t#会把这个class类传递过去\n\nA.demo2()\n\na1 = A()\na1.demo2()\t\t\t\t\t#实例化后也能正常调用函数，对应了django中的View--as_view()--classonlymethod\n\t#实例也能调用，是跟类变量一样，实例继承了类的方法么，下面的静态方法也是一样，类跟实例都能调用！！！！\n")])])]),s("p",[s("strong",[t._v("类方法传递参数")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class A(object):\n    n=100\n\n    @classmethod  \n    def eat(cls,food):\n        print(\"%s is eating %s\" % (cls.n, food))\n\n\nA.eat('xx')\n")])])]),s("h3",{attrs:{id:"类属性、类方法也能被继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类属性、类方法也能被继承"}},[t._v("#")]),t._v(" "),s("strong",[t._v("类属性、类方法也能被继承")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class A:\n    count = 100\n    \n    @classmethod\n    def demo1(cls):\n        print('hello...')\n\nclass B(A):\n    pass\n    \n    #@classmethod\n    #def demo1(cls):\t\t\t\t\t\n    #    super().demo1()\t\t\t\t#类方法也能正常的super继承\n    #    print('hello2...')\n\nprint(B.count)\t\t\t\t\t\t#正常调用类属性\nB.demo1()\t\t\t\t\t\t\t#正常调用类方法\n")])])]),s("h2",{attrs:{id:"静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),s("blockquote",[s("p",[t._v("实例方法：访问实例属性")]),t._v(" "),s("p",[t._v("类方法：访问类属性")]),t._v(" "),s("p",[t._v("静态方法：既不需要访问实例属性也不需要访问类属性")]),t._v(" "),s("p",[t._v("参考文档：https://www.bilibili.com/video/BV1ex411x7Em?p=414&spm_id_from=pageDriver\t\t#01.46会有提示应该定义为静态方法！！！！！！！！！！")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class A:\n    @staticmethod\n    def demo1():\n        print('demo1----')\n        \n\nA.demo1()\n\na1 = A()\na1.demo1()\t\t\t#既不需要访问类属性、也不需要访问实例属性，所以类和实例都可以调用（反正也不需要访问变量）\n\n")])])]),s("p",[t._v("实例方法、类方法、静态方法的 使用场景：https://www.bilibili.com/video/BV1ex411x7Em?p=415&spm_id_from=pageDriver")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Dog(object):\n    def __init__(self,name):\n        self.name = name\n\n    @staticmethod\n    def eat(self,food):\n        print \"%s is eating %s\"%(self.name,food)\n\nd = Dog('xx')\nd.eat(d,'baozi')\n")])])]),s("h2",{attrs:{id:"property属性方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#property属性方法"}},[t._v("#")]),t._v(" property属性方法")]),t._v(" "),s("blockquote",[s("p",[t._v("给一个类添加一个需要动态执行才能产生的结果这样一个属性！！！！！！！！！！")]),t._v(" "),s("p",[t._v("将一个没有关键字的方法（self不算）变成一个属性")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Student:\n\t@property\n    def columns(self):\n    \treturn  [self.name,self.sex,self.age,self.location,self.qq]\n\nstu=Student()\nstu.columns                         #实例化后调用\n")])])]),s("p",[s("strong",[t._v("property属性方法传参")]),t._v("   实例调用属性方法不加（），所以调用时传参有点特殊")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Dog(object):\n    n=100\n    def __init__(self,name):\n        self.name = name\n        self.__food = None              #用于存储传递的food参数\n\n    @property           #把一个方法变成静态属性，如果需要传递参数呢，如 def eat(self,food):\n    def eat(self):\n        print(\"%s is eating %s\"%(self.name,self.__food))\n\n    @eat.setter\n    def eat(self,food):                 #写的方法名还必须是eat\n        print('set to food:',food)\n        self.__food = food\n\n    @eat.deleter\n    def eat(self):\n        del self.__food\n        print('删完了')\n\nd = Dog('xx')\nd.eat\nd.eat = 'baozi'         #给属性赋值'baozi'\nd.eat\n\ndel d.eat\n\n#d.eat\t\t\t\t\t#在查看已经没有该属性了\n")])])]),s("h2",{attrs:{id:"私有属性、私有方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#私有属性、私有方法"}},[t._v("#")]),t._v(" 私有属性、私有方法")]),t._v(" "),s("blockquote",[s("p",[t._v("以 __ 开始即可")]),t._v(" "),s("p",[t._v("私有属性、方法只能在class类内部进行调用，无法在类的外部调用（继承后也无法调用）")]),t._v(" "),s("p",[t._v("参考文档：https://www.bilibili.com/video/BV1ex411x7Em?p=389&spm_id_from=pageDriver")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('class Women:\n    __a = 111\t\t\t\t\t\t\t\t\t#类 私有变量\n    def __init__(self,name) -> None:\n        self.name = name\n        self.__age = 18\n    \n    def __secret(self):\n        print("%s 的年龄是 %d,类变量是 %d" %(self.name,self.__age,self.__a))     #内部可以直接调用私有变量\n\nxiaofang = Women("小芳")\nprint(xiaofang._Women__age)\t\t\t\t\t\t#实例 强制调用私有变量\nxiaofang._Women__secret()\t\t\t\t\t\t#实例 强制调用私有方法\n\n\nprint(xiaofang._Women__a)\t\t\t\t\t\t#实例 强制调用类变量\nprint(Women._Women__a)\t\t\t\t\t\t\t#类   强制调用类变量\n\n')])])]),s("ul",[s("li",[s("p",[t._v("继承时调用私有方法")]),t._v(" "),s("blockquote",[s("p",[t._v("继承后B是不能直接调用A中的私有属性和私有方法的，但是B可以调用A的公有方法，如果想在B中调用A的私有属性和方法，可以转换一下：在A中单独定义一个公有方法来调用自己的私有方法，然后在B中调用此公有方法")]),t._v(" "),s("p",[t._v("参考视频：https://www.bilibili.com/video/BV1ex411x7Em?p=399&spm_id_from=pageDriver  + 下一集#P400")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class A:\n    __a = 111\n\n    def __init__(self, name) -> None:\n        self.name = name\n        self.__age = 18\n\n    def __secret(self):\n        print(\"%s 的年龄是 %d,类变量是 %d\" % (self.name, self.__age, self.__a))\n\nclass B(A):\n\tpass\n\n\nxiaoming = B('小明')\nprint(xiaoming.__A)\t\t\t\t\t\t#无法调取 类的私有属性\nprint(xiaoming.__age)\t\t\t\t\t#无法调取实例的私有属性\nxiaoming.__secret()\t\t\t\t\t\t#无法调取实例的私有方法\n\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"mro方法搜索顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mro方法搜索顺序"}},[t._v("#")]),t._v(" MRO方法搜索顺序")]),t._v(" "),s("blockquote",[s("p",[t._v("参考视频：https://www.bilibili.com/video/BV1ex411x7Em?p=403")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class A:\tpass\nclass B:\tpass\nclass C(A,B):\tpass\n\nprint(C.__mro__)\n\t(<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)\n")])])]),s("h2",{attrs:{id:"新式类、旧式类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新式类、旧式类"}},[t._v("#")]),t._v(" 新式类、旧式类")]),t._v(" "),s("blockquote",[s("p",[t._v("参考视频：https://www.bilibili.com/video/BV1ex411x7Em?p=404&spm_id_from=pageDriver")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#在python 2.x中\n\tclass A(object):\tpass\t\t\t\t\t#新式类\n\tclass B: pass\t\t\t\t\t\t\t\t#经典类/旧式类\n\t\n\tdir(A)中有很多的方法，dir(B)中只有两个方法\n\n#在python 3.x中，默认就是以object为基类，所以写不写都可以，都是新式类\n")])])]),s("h2",{attrs:{id:"单例设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例设计模式"}},[t._v("#")]),t._v(" 单例设计模式")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("_new")]),t._v("_    分配内存地址\t\t\t#P419")]),t._v(" "),s("p",[t._v("​\t\t#"),s("em",[t._v("_new")]),t._v("_方法是一个静态方法,super那里的cls是传递的实例方法__new__的第一个参数cls\t\t#P420  06.20")]),t._v(" "),s("p",[s("em",[t._v("_init")]),t._v("_      对象的初始化")]),t._v(" "),s("p",[t._v("单例设计模式：不是只能创建一个实例，第二个无法创建返回内存地址为None（自己之前就是这样理解的），而是创建多个实例对象时返回的内存地址是相同的")]),t._v(" "),s("p",[t._v("参考文档：https://www.bilibili.com/video/BV1ex411x7Em?p=418&spm_id_from=pageDriver")])]),t._v(" "),s("h3",{attrs:{id:"new-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-方法"}},[t._v("#")]),t._v(" "),s("strong",[t._v("__new__方法")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("__new__是一个静态方法，不是实例方法或者类方法\n\n测试：\n\tClass A: pass\n\tipython中：\n\t\tA.__new__?\t\t\t输出的是Signature: A.__new__(*args, **kwargs)\t\t#没有self或cls\n\t\tA.__init__?\t\t\t输出的是Signature: A.__init__(self, /, *args, **kwargs)\n\t\t\n\t\tobject.__new__\t\t输出的是：<function object.__new__(*args, **kwargs)>\n\t\tobject.__new__? \t输出的是：Signature: object.__new__(*args, **kwargs)\n\n\thelp(type):\t\t\t\t#在ipython中执行\n\t\t |  Static methods defined here:\t\t\t#静态方法\n         |\n         |  __new__(*args, **kwargs)\n         |      Create and return a new object.  See help(type) for accurate signature.\n         |\n         |  --------------------------------------------\n\n\nclass A:\n\tdef __new__(cls,*args,**kwargs):\t\t\t#第一个参数是哪个类调用就传递哪个类\n\t\tprint(cls)\t\t\t\t\t\t\t\t#输出<class '__main__.A'>\n\t\tsuper().__new__(cls,*args,**kwargs)\t\t#这个cls是静态方法传递的第一个参数\n\n\n参考视频：https://www.bilibili.com/video/BV1ex411x7Em?p=420&spm_id_from=pageDriver\t\t！！！！！\n")])])]),s("h3",{attrs:{id:"单实例设计模式代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单实例设计模式代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("单实例设计模式代码")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("正确的代码，多次创建实例返回的都是相同的内存地址：\n    class A:\n        instance = None\n        init_flag = False\n\n        def __init__(self) -> None:\t\t\t\t#init动作只执行一次，不是必须的，可以不写\n            if A.init_flag:\n                return\n            self.name = 10  \t\t\t\t\t#正常的初始化动作...\n            A.init_flag = True\n\n        def __new__(cls,*args,**kwargs):\t\t\t#只分配一次内存空间，这个是必须的\n            if cls.instance is  None:\n                cls.instance = super().__new__(cls, *args, **kwargs)   #new是一个静态方法，所以需要传递一个参数cls\n            return cls.instance\t\t\t\t\t\t#注意这个编码逻辑，多用这种方式，不要写一堆if/else\n\n    a1 = A()\n    a2 = A()            #应该是会覆盖a1的初始化，没有详细测试\n\n    print(a1, a2)\n\n\n错误的代码，多次创建实例时返回的是None，自己之前就是这么写的：\n    class A:\n        count = 0\n\n        def __init__(self) -> None:\n            pass\n\n        def __new__(cls):\n            if A.count == 0:\n                A.count += 1\n                return super().__new__(cls)\n            else:\n                return None\t\t\t\t\t\t\t\t#此处不应该返回None\n\n    a1 = A()\n    a2 = A()\n\n    print(a1,a2)\n")])])]),s("h2",{attrs:{id:"doc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#doc"}},[t._v("#")]),t._v(" "),s("em",[t._v("_doc")]),t._v("_")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#__doc__：表示类的描述信息\n\nclass Dog(object):\n    '''xxxxxx'''\n    def __init__(self,name):  pass\n\nprint(Dog.__doc__)           输出：xxxxxx\n")])])]),s("h2",{attrs:{id:"init-str-del"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#init-str-del"}},[t._v("#")]),t._v(" "),s("em",[t._v("_init")]),t._v("_ \\ "),s("em",[t._v("_str")]),t._v("_\t\\ "),s("em",[t._v("_del")]),t._v("_")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("_init")]),t._v("_\t\t\t#person()时调用，只要是实例化就会调用，不管有没有使用=接收")]),t._v(" "),s("p",[s("em",[t._v("_str")]),t._v("_\t\t\t #打印person()时调用； p1 = Person()  && print( p1 )")]),t._v(" "),s("p",[t._v("​\t\t#需要定义return值")]),t._v(" "),s("p",[s("em",[t._v("_del")]),t._v("_\t\t\t#删除del person()时调用;\tp1 = Person()  && del p1；对应__init__处于生命周期的两端")]),t._v(" "),s("p",[t._v("因为是实例方法，三个方法都需要传入self参数")]),t._v(" "),s("p",[t._v("参考视频：https://www.bilibili.com/video/BV1ex411x7Em?p=375&spm_id_from=pageDriver")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Food(object):\n    def __init__(self, name, price) -> None:\t\t#None是返回值，此时没有返回值所以是None\n        pass\n\n    def __str__(self) -> str:\t\t\t\t\t\t#返回值是字符串类型的\n        return '__str__ ..return..'\n    \n    def __del__(self) -> None:\t\t\t\t\t\t#返回值为None\n        print('__del__---------')\n        \nfood=Food('baicai',10)\n-\tstr(food)\t\t\t\t\t#相当于调了food.__str__()\n-\tfood.__str__()\n-\tprint(food)\n\ndel food\nprint('---'*10)\n")])])]),s("h2",{attrs:{id:"module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[t._v("#")]),t._v(" "),s("em",[t._v("_module")]),t._v("_")]),t._v(" "),s("p",[t._v("表示当前操作的对象在哪个模块")]),t._v(" "),s("h2",{attrs:{id:"class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[t._v("#")]),t._v(" "),s("em",[t._v("_class")]),t._v("_")]),t._v(" "),s("p",[t._v("表示当前操作的对象的类是什么")]),t._v(" "),s("h2",{attrs:{id:"dict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dict"}},[t._v("#")]),t._v(" "),s("em",[t._v("_dict")]),t._v("_")]),t._v(" "),s("p",[t._v("查看类或对象中的所有成员或方法（输出结果是一个字典）")]),t._v(" "),s("h2",{attrs:{id:"getattr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getattr"}},[t._v("#")]),t._v(" "),s("em",[t._v("_getattr")]),t._v("_")]),t._v(" "),s("blockquote",[s("p",[t._v("当在class中找不到对应的方法时，会去找__getattr__")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class T(object):\n    name = 'tom'\n    def __getattr__(self,aaa):\n        print(aaa, 'in getattr')\n        return 'test'\nt1=T()\n\nt1.age\t\t\t\t\t\t\t\t#输出'age in getattr'\ngetattr(t1,'age')\t\t\t\t\t#输出'age in getattr'\n")])])]),s("h2",{attrs:{id:"setattr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setattr"}},[t._v("#")]),t._v(" "),s("em",[t._v("_setattr")]),t._v("_")]),t._v(" "),s("blockquote",[s("p",[t._v("代码待商榷！！！")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class T(object):\n    name = 'tom'\n    \n    def __setattr__(self, name, value):\n        # self.name = value +1 \t\t\t\t\t\t\t#这个为什么不行呢？？？？\n        return super().__setattr__(name, value)\t\t\t\n    \t\t#return super().__setattr__(name, value+11)\n\t\t\t#注意：此时return super().__setattr__(name, value)后面就没有self了 ！！！！\n\nt1 = T()\nsetattr(t1,'age',10)\n")])])]),s("h2",{attrs:{id:"add-、-mul-、-abs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add-、-mul-、-abs"}},[t._v("#")]),t._v(" "),s("em",[t._v("_add")]),t._v("_、__mul__、__abs__")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__add__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__mul__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__str__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a的值是: %d"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__abs__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'in abs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyInt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\na"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#调用__add__")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#调用__mul__")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" a             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#调用__str__")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("abs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#abs是python内置的方法; n=10,dir(n)就有__abs__方法，n.__abs__()效果同abs(n)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这些加、乘、str运算实际是调用了python内置的方法，如n=10,dir(n)可以看到n里面有方法__add__、__mul__这些方法！！！！")]),t._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class MyInt(int):       #int、str、dict这些类都是可以被继承的，就像继承object一样!!!!!!!!!!!!!\n\tpass\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Student(object):\n    def __abs__(self):\n        print('hahaha')\n\n    def __str__(self):\n        print('你上当了')\n        return '你上当了'\n\nstu = Student()\nabs(stu)\nstr(stu)\n")])])]),s("h2",{attrs:{id:"call"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[t._v("#")]),t._v(" "),s("em",[t._v("_call")]),t._v("_")]),t._v(" "),s("p",[t._v("实例对象加（）直接调用")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Dog(object):\n    def __init__(self,name):\n    def __call__(self,*args,**kwargs):\n       print 'call running',args,kwargs\n       \nd = Dog('xx')\nd(1,2,3,name='xxx')      #正常情况下，如果没有__call__函数，d实例化后不能d()\n         #d()()    加2个（）执行call方法\n")])])]),s("h2",{attrs:{id:"getitem-setitem-delitem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getitem-setitem-delitem"}},[t._v("#")]),t._v(" "),s("em",[t._v("_getitem")]),t._v("_ \\ "),s("em",[t._v("_setitem")]),t._v("_\t\\ "),s("em",[t._v("_delitem")]),t._v("_")]),t._v(" "),s("h2",{attrs:{id:"mataclass"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mataclass"}},[t._v("#")]),t._v(" "),s("em",[t._v("_mataclass")]),t._v("_")])])}),[],!1,null,null,null);s.default=e.exports}}]);