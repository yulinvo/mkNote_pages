(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{387:function(n,t,e){"use strict";e.r(t);var a=e(13),r=Object(a.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h3",{attrs:{id:"闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[this._v("#")]),this._v(" 闭包")]),this._v(" "),n("blockquote",[n("p",[this._v("参考文档：https://www.bilibili.com/video/BV1M7411a7M3?from=search&seid=599210040493285521&spm_id_from=333.337.0.0")])]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("求平均值，常规写法：\n    li = []\t\t\t\t\t\t\t\t\t\t#全局变量，都可以修改，数据不安全\n    def average(value):\n        li.append(value)\n        return sum(li)/len(li)\n\n    print(average(10))\n    print(average(20))\n    print(average(30))\n-----------------------------------------------------------------\n求平均值，闭包写法：\n    def average():\n        li = []\t\t\t\t\t\t\t\t\t#将列表在函数中隐藏起来，在其他地方就不能修改了\n        def inner(value):\n            li.append(value)\n            return sum(li)/len(li)\n        return inner\n\n    avg = average()\n    print(avg(10))\n    print(avg(20))\n    print(avg(30))\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("参考文档：https://www.bilibili.com/video/BV1JW411i7HR/?spm_id_from=333.788.recommend_more_video.0\n\n闭包： 内部函数对外部函数作用域里变量的引用\t\t\t#外部函数的变量！！！！！\n\ndef func():\n    a = 1                       \t\t\t#外部函数作用域里的变量\n    print('this is func...')\n    def func1(num):\n        print('this is func1')\n        print(num + a)\n    return func1\nvar = func()\nvar(3)\n-----------------------------------------------------------------\nmylist = [1,2,3,4,5]\ndef func(obj):\n    print('func',obj)\n    def func1():\n        obj[0] += 1\t\t\t\t\t\t\t#持有外部函数中的变量\n        print('func1:',obj)\n    return func1\nvar = func(mylist)\nvar()\nvar()\nvar()\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);