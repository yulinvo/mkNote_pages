(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{390:function(t,n,s){"use strict";s.r(n);var e=s(13),a=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[n("strong",[t._v("迭代器介绍")])]),t._v(" "),n("blockquote",[n("p",[t._v("1，list、tuple、dict、之所以能被迭代，是因为dir(xx)里面有一个'"),n("em",[t._v("_iter__'和'")]),t._v("_next__'这两个方法")]),t._v(" "),n("p",[t._v("2，'__iter__'方法需要返回对象本身，即self")]),t._v(" "),n("p",[t._v("3，'__next__'方法返回下一个数据，如果数据没有了，这需要抛出一个StopIteration的异常")]),t._v(" "),n("p",[t._v("参考文档：https://www.bilibili.com/video/BV1BT4y1P7nn?from=search&seid=16150640023895278497&spm_id_from=333.337.0.0")])]),t._v(" "),n("p",[t._v("迭代器是访问集合元素的一种方式：")]),t._v(" "),n("p",[t._v("​\t1，迭代对象从第一个元素开始访问，直到所有元素被访问完结束")]),t._v(" "),n("p",[t._v("​\t2，迭代器只能往前，不能后退（依然是从第一个元素访问到最后一个元素，不是逆序的）,不过也很少后退")]),t._v(" "),n("p",[t._v("​\t3，迭代器不需要事先准备好整个迭代过程中的所有元素，只是在迭代到某元素时才计算该元素，这个特定使它特别适合便利一些巨大或是无限的集合，比如几个G的文件\n​\t4, 迭代完成后会报错：StopIteration,如iter里面只有2个元素，执行了三次next()   a=iter([11,22,33]);print a.next()")]),t._v(" "),n("h2",{attrs:{id:"迭代器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__iter__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__next__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" StopIteration"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter\n\nit1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for i in range(10):")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(next(it1))\t\t\t\t\t\t\t#通过next方法调用")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(it1.__next__())\t\t\t\t\t\t#通过__next__()调用，同next()")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" item "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" it1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\t\t\t\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#for...in...循环")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"可迭代对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可迭代对象"}},[t._v("#")]),t._v(" 可迭代对象")]),t._v(" "),n("blockquote",[n("p",[t._v("判断依据：内部是否有__iter__且返回迭代器对象")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class IT(object):\n    def __init__(self) -> None:\n        self.counter = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        self.counter += 1\n        if self.counter >= 5:\n            raise StopIteration()\n        return self.counter\nclass Foo(object):\n    def __iter__(self) -> None:\n        return IT()\t\t\t\t\t\t\t\t#返回一个可迭代对象\nobj = Foo()\nfor item in obj:\n    print(item)\n")])])]),n("ul",[n("li",[n("p",[t._v("自定义循环迭代器")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class IterRange(object):\n    def __init__(self,num) -> None:\n        self.num  = num\n        self.counter = -1\n    def __iter__(self):\n        return self\n    def __next__(self):\n        self.counter += 1\n        if self.counter >= self.num :\t\t\t\t\t#！！！！\n            raise StopIteration()\n        return self.counter\n\nclass Xrange(object):\n    def __init__(self,max_num) -> None:\n        self.max_num = max_num\n    def __iter__(self) -> None:\n        return IterRange(self.max_num)\t\t\t\t\t\t#！！！\n\nfor item in Xrange(15):\n    print(item)\n")])])])])]),t._v(" "),n("h2",{attrs:{id:"迭代器与可迭代对象的判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#迭代器与可迭代对象的判断"}},[t._v("#")]),t._v(" 迭代器与可迭代对象的判断")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("代码同【可迭代对象】中的代码\n\nfrom collections import Iterator,Iterable\nobj = list([11,22,33])\nprint(isinstance(obj,Iterator))\t\t\t\t\t\t#obj不是迭代器，但是是可迭代对象\nprint(isinstance(obj,Iterable))\t\t\t\t\t\t#obj不是迭代器，但是是可迭代对象\n\n-----------------------------------------------------------------\nv1 = range(1000)\ndir(v1)\t\t\t\t\t\t\t\t\t\t#此时v1是可迭代对象，而不是迭代器（只有__iter__，没有__next__方法）\nv2 = v1.__iter__()\ndir(v2)\t\t\t\t\t\t\t\t\t\t#此时v2是迭代器（既有__iter__方法，也有__next__方法）\n\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);