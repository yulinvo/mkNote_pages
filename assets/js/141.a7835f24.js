(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{406:function(t,a,s){"use strict";s.r(a);var e=s(13),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"起步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#起步"}},[t._v("#")]),t._v(" 起步")]),t._v(" "),a("p",[t._v("python是使用C开发而来")]),t._v(" "),a("p",[t._v("C语言：代码编译得到机器码，机器码在处理器上直接执行，每一条指令控制CPU工作（同样的功能c100行代码，python10行代码  ）")]),t._v(" "),a("p",[a("strong",[t._v("cpython")]),t._v("：所说的python就是这种python，是默认情况下的python，使用C解释器执行，.pyc （有pyc文件没有py文件， 程序也可以正常执行（正常运行的顺序是先找pyc文件），只是没法在更改了）")]),t._v(" "),a("p",[t._v("jpython：java实现的python，java解释器执行，解释为java能识别的字节码")]),t._v(" "),a("p",[t._v("ironpython：C#解释器，C#字节码")]),t._v(" "),a("p",[t._v("rubypython、jspython略，同上")]),t._v(" "),a("p",[t._v("pypy：据说一定会火，因为速度快，解释器--字节码--机器码，编译完后直接是机器码（而Cpython的编译过程只是得到了字节码），编译过程虽然慢，但是执行过程就很快了   gli：性能解释器锁，导致运行慢（pandas处理大数据的，重写了gli，速度很快）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("python -h    查看帮助，有一个-m的参数，如#python -m json.tool\n-\tpython -m py_compile module.py            #编译成pyc文件\n    #python module.pyc                   #执行编译文件，ipython中import可以执行import module，默认引入的就是pyc\n-\tpython -O  -m py_compile module.py         #生成module.pyo的字节码文件，据说执行的比pyc字节码文件快一点\n    #引入的方法：python -O 进入python的shell试图(ipython好像不支持-O模式)，然后import module就可以引入pyo(可以先删除py、pyc文件测试)\n")])])]),a("h2",{attrs:{id:"编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码"}},[t._v("#")]),t._v(" 编码")]),t._v(" "),a("p",[t._v("ascii: 8bit")]),t._v(" "),a("p",[t._v("unicode: 16bit  万国码 （python 2.7里面默认是unicode）")]),t._v(" "),a("p",[t._v("utf-8: 字母数字是ascii，其他中文和语言用unicode，实际上是对unicode进行了压缩")]),t._v(" "),a("p",[t._v("utf8转为gbk：utf8--\x3eunicode--\x3egbk")]),t._v(" "),a("p",[a("strong",[t._v("encode编码")]),t._v("：xx --\x3e unicode\t\t\t\t# xx为gbk、utf8等")]),t._v(" "),a("p",[a("strong",[t._v("decode解码")]),t._v("：unicode --\x3e xx\t\t\t\t# xx为gbk、utf8等")]),t._v(" "),a("h2",{attrs:{id:"字体颜色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字体颜色"}},[t._v("#")]),t._v(" 字体颜色")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("print '\\033[31;1m zxcv'               #红色\nprint '\\033[32;1m zxcv'               #绿色\nprint '\\033[32;1m  nihao\\033[0m'      #好像黑色的，\n")])])]),a("h2",{attrs:{id:"深浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深浅拷贝"}},[t._v("#")]),t._v(" 深浅拷贝")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("很多数据类型都有__copy__方法，改方法实际上是调用copy.copy方法\n")])])]),a("p",[a("strong",[t._v("分两类")]),t._v("：字符串和数字为一类(字符串池和数字池)，其他的为一类")]),t._v(" "),a("h3",{attrs:{id:"字符串和数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串和数字"}},[t._v("#")]),t._v(" 字符串和数字")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#无论赋值、深拷贝、浅拷贝内存中使用的地址始终是一样的：\n\na1=123123\na2=123123                    #id相同（字符串略）\na2=a1                        #id相同（字符串略）\na2=copy.copy(a1)             #id相同（字符串略）\na2=copy.deepcopy(a1)         #id相同（字符串略）\nprint id(a1);print id(a2)     \n")])])]),a("h3",{attrs:{id:"其他-元组、列表、字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他-元组、列表、字典"}},[t._v("#")]),t._v(" 其他：元组、列表、字典")]),t._v(" "),a("p",[a("strong",[t._v("浅拷贝")]),t._v("：copy.copy()：浅拷贝只拷贝第一层\n"),a("strong",[t._v("深拷贝")]),t._v("：copy.deepcopy()：深拷贝有几层就拷贝几层\n"),a("strong",[t._v("赋值")]),t._v("：拷贝了0层")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("浅拷贝")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("n1={'k1':'wu','k2':123,'k3':['alex',456]}\n#n2={'k1':'wu','k2':123,'k3':['alex',456]}\n\nn2=copy.copy(n1)\n    print id(n1);print id(n2)      #不同\n    print id(n1['k3']);print id(n2['k3'])      #相同，k1-k3都相同\n    print id(n1['k3'][1]);print id(n2['k3'][1])      #相同\n")])])])]),t._v(" "),a("li",[a("p",[t._v("深拷贝")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("n1={'k1':'wu','k2':123,'k3':['alex',456]}\n#n2={'k1':'wu','k2':123,'k3':['alex',456]}\n\nn2=copy.deepcopy(n1)\n    print id(n1);print id(n2)      #不同\n    print id(n1['k3']);print id(n2['k3'])      #k1-k2相同，k3不同\n    print id(n1['k3'][1]);print id(n2['k3'][1])      #k3列表里面的值相同\n")])])])]),t._v(" "),a("li",[a("p",[t._v("赋值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("n1={'k1':'wu','k2':123,'k3':['alex',456]}\nn2={'k1':'wu','k2':123,'k3':['alex',456]}      #不同（有点类似于深拷贝）\nn2 == n1      #相同,id不相同\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"三目运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三目运算"}},[t._v("#")]),t._v(" 三目运算")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("max = 10 if 1>0 else 100\n")])])]),a("h2",{attrs:{id:"is-和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-和"}},[t._v("#")]),t._v(" is 和 ==")]),t._v(" "),a("blockquote",[a("p",[t._v("is: 判断内存地址是否相同（使用id查看）\t\t#还有一个 is not")]),t._v(" "),a("p",[t._v("==：判断值是否相同")]),t._v(" "),a("p",[t._v("python中跟None比较时，建议使用is，如 if a is None: xx")]),t._v(" "),a("p",[t._v("参考视频：https://www.bilibili.com/video/BV1ex411x7Em?p=388&spm_id_from=pageDriver")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("a1 = [1,2,3]\na2 = [1,2,3]\n\na1 is a2\t\t\t#false\na1 == a2\t\t\t#true\n")])])]),a("h2",{attrs:{id:"获取用户输入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取用户输入"}},[t._v("#")]),t._v(" 获取用户输入")]),t._v(" "),a("p",[t._v("res=input('>>>')\t\t\t\t\t#3.x中的用法 （2.x中使用raw_input('>>>')函数）")]),t._v(" "),a("h2",{attrs:{id:"列表推导式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表推导式"}},[t._v("#")]),t._v(" 列表推导式")]),t._v(" "),a("p",[t._v("生成一个二维数组：[ [ i for i in range(4)] for j in range(4)]")]),t._v(" "),a("h2",{attrs:{id:"if-判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-判断"}},[t._v("#")]),t._v(" if 判断")]),t._v(" "),a("p",[t._v("if a==1 and b==2: pass")]),t._v(" "),a("h2",{attrs:{id:"while循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while循环"}},[t._v("#")]),t._v(" while循环")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("死循环")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("while True:\n    time.sleep(1)\n    print('hello')\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("while not True:\n    time.sleep(1)\n    print('hello')\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"for循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[t._v("#")]),t._v(" for循环")]),t._v(" "),a("h2",{attrs:{id:"hasattr、getattr、setattr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hasattr、getattr、setattr"}},[t._v("#")]),t._v(" hasattr、getattr、setattr")]),t._v(" "),a("p",[t._v("Python的hasattr() getattr() setattr() 函数使用方法详解:   http://www.cnblogs.com/cenyu/p/5713686.html")])])}),[],!1,null,null,null);a.default=n.exports}}]);