(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{410:function(t,e,r){"use strict";r.r(e);var n=r(13),s=Object(n.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("p",[t("strong",[this._v("shutil")]),this._v("模块（高级的 文件、文件夹、压缩包  处理模块）")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("shutil.copyfileobj(fsrc,fdst)       #拷贝文件内容\nshutil.copyfile(src,dst)            #拷贝文件\nshutil.copymode(src,dst)            #仅拷贝权限，内容、组、用户均不变\nshutil.copystat(src,dst)            #拷贝状态的信息，包括：mode bits、atime、mtime、flags\nshutil.copy(src,dst)                #拷贝文件和权限\nshutil.copy2(src,dst)               #拷贝文件和状态\n\nshutil.ignore_patterns(*patterns)   #好像是需要配合下面的shutil.copytree（）使用，如：shutil.ignore_patterns('*.pyc','tmp*')\nshutil.copytree(src,dst,symlinks=False,ignore=None)     #递归的去拷贝文件,如：shutil.copytree(src,dst,symlinks=False,ignore=ignore_patterns('*.pyc','tmp*'))\n\nshutil.rmtree(path[,ignore_errors=[,onerror]])      #递归的删除目录\nshutil.move(src,dst)                #递归的去移动文件\nshutil.make_archive(base_name=/user/123/xx.zip,format=,root_dir='')         #创建压缩包并返回文件路径\n        base_name：文件名，不写目录默认当前目录\n        format：压缩包种类，zip、tar、bztar、gztar\n        root_dir: 要压缩的文件路径（默认当前路径）\n        owner:用户，默认当前用户\n        group:组，默认当前组\n        logger：用于记录日志，通常是logging.Logger对象\n\nshutil对压缩包的处理是调用ZipFile和TarFile两个模块来进行的\n    zipfile压缩：\n    z=zipfile.ZipFile('laxi.zip','w')           #z是实例，也可以叫句柄\n    z.write('a.log')\n    z.write('data.data')\n    z.close()\n\n    zipfile解压：\n    z=zipfile.ZipFile('laxi.zip','r')\n    z.extractall()\n    z.close\n\n    tarfile压缩：\n    tar=tarfile.open('your.tar','w')\n    tar.add('/home/123.zip',arcname='',)\n    tar.add('/home/111.zip',arcname='',)\n    tar.close()\n\n    tarfile解压：\n    tar=tarfile.open('your.tar','r')\n    tar.extractall()                        #可设置解压地址\n    tar.close()\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);