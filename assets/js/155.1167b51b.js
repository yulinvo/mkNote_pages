(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{422:function(t,e,i){"use strict";i.r(e);var a=i(13),m=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"time模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#time模块"}},[t._v("#")]),t._v(" time模块")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('time.clock()                                           #返回处理器时间,很少用\ntime.process_time()                                    #同上（不过没找到这个命令），很少用\ntime.time()                                            #返回当前时间戳！！！\ntime.sleep(1)                                           #睡眠时间\ntime.ctime()                                           #输出系统当前时间，按照默认格式输出的\n    time.ctime(1700779316.07)\n    time.ctime(time.time()-86400)                          #计算一天前的时间\ntime.gmtime(time.time()-86400)                         #struct_time模式（格林威治时间）\ntime.localtime(time.time()-86400)                      #将时间戳转换为struct_time模式（本地时间）！！！\ntime.mktime(time.localtime())                          #将struct_time转换为时间戳\ntime.strftime("%Y-%m-%d %H:%M:%S",time.localtime())     \n\t#将struct_time格式转换为字符串格式，不用先取出 lt=time.localtime,然后在strftime，直接time.strftime()    \n\t>>> time.strftime(\'%Y-%m-%d %H:%M:%S\')\t！！！\ntime.strptime("2016-01-22 11:19:30","%Y-%m-%d %H:%M:%S")      #将字符串转换为struct_time格式\n\n')])])]),e("h2",{attrs:{id:"datetime模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#datetime模块"}},[t._v("#")]),t._v(" datetime模块")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("datetime.date.today()                                    #输出当前日期，格式：2017-07-23\ndatetime.date.fromtimestamp(time.time()-86400)            #将时间戳转换为日期格式\ndatetime.datetime.now()                                   #当前时间\n    current_time=datetime.datetime.now()\n    current_time.timetuple()                                  #返回struct_time模式\n    current_time.replace(2014,5,6)                            #替换掉指定值后，返回当前时间\n    datetime.datetime.strptime('2016/11/22 16:33','%Y/%m/%d %H:%M')     #将字符串转换为日期格式\n时间加减：\n    datetime.datetime.now()+datetime.timedelta(days=10)           #比现在时间加10天\n    datetime.datetime.now()+datetime.timedelta(hours=-10)         #比现在时间减10小时\n    datetime.datetime.now()+datetime.timedelta(seconds=120)       #比现在时间加120秒\n")])])]),e("h2",{attrs:{id:"timeit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#timeit"}},[t._v("#")]),t._v(" timeit")]),t._v(" "),e("blockquote",[e("p",[t._v("在ipython试图下执行，但是在新版本的ipython中好像有点问题")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("timeit aa.say()             #查看say函数执行的时间\n    #The slowest run took 4.51 times longer than the fastest. This could mean that an intermediate result is being cached\n100000 loops, best of 3: 8.46 µs per loop\n        #最好的三次，每次平均执行时长为8.46us\n")])])])])}),[],!1,null,null,null);e.default=m.exports}}]);